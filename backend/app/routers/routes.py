"""–†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏"""

import re
from fastapi import APIRouter, HTTPException

from app.schemas.route import RouteAnalysisRequest, RouteAnalysisResponse
from app.schemas.response import ResponseModel
from app.services.ml_route_optimizer import MLRouteOptimizer

router = APIRouter(prefix="/routes", tags=["routes"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
ml_optimizer = MLRouteOptimizer()


@router.post("/analyze", response_model=ResponseModel[RouteAnalysisResponse])
async def analyze_route(request: RouteAnalysisRequest):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML-–º–æ–¥–µ–ª–∏

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    —Å —É—á–µ—Ç–æ–º:
    - –¢—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    - –†–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    - –û–±–µ–¥–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
    - –£—Ä–æ–≤–Ω—è –∫–ª–∏–µ–Ω—Ç–∞ (VIP = 25 –º–∏–Ω, Standard = 15 –º–∏–Ω –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
    - ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –º–∏–Ω–∏–º—É–º 1 –∫–ª–∏–µ–Ω—Ç
        if len(request.clients) == 0:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º 50 –∫–ª–∏–µ–Ω—Ç–æ–≤ (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        if len(request.clients) > 50:
            raise HTTPException(
                status_code=400,
                detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: 50"
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        if request.start_time and not re.match(r'^([01]\d|2[0-3]):([0-5]\d)$', request.start_time):
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ start_time. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM"
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        valid_days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
        if request.start_day and request.start_day.lower() not in valid_days:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_days)}"
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        for idx, client in enumerate(request.clients):
            if not (-90 <= client.latitude <= 90):
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–≤–µ—Ä–Ω–∞—è —à–∏—Ä–æ—Ç–∞ —É –∫–ª–∏–µ–Ω—Ç–∞ {idx + 1}: {client.latitude}"
                )
            if not (-180 <= client.longitude <= 180):
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞ —É –∫–ª–∏–µ–Ω—Ç–∞ {idx + 1}: {client.longitude}"
                )

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –∫–ª–∏–µ–Ω—Ç–∞
            if client.level.lower() not in ["vip", "standard"]:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞ {idx + 1}: {client.level}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: vip, standard"
                )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        clients_data = [
            {
                "address": client.address,
                "latitude": client.latitude,
                "longitude": client.longitude,
                "level": client.level,
                "work_start": client.work_start,
                "work_end": client.work_end,
                "lunch_start": client.lunch_start,
                "lunch_end": client.lunch_end,
                "id": client.id or f"client_{idx}"
            }
            for idx, client in enumerate(request.clients)
        ]

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        start_point_data = None
        if request.start_point:
            start_point_data = {
                "address": request.start_point.address,
                "latitude": request.start_point.latitude,
                "longitude": request.start_point.longitude
            }

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML-–º–æ–¥–µ–ª–∏
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è {len(clients_data)} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        if start_point_data:
            print(f"üìç –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞: {start_point_data['address']}")

        optimized_result = await ml_optimizer.optimize_route(
            clients=clients_data,
            start_point=start_point_data,
            start_time=request.start_time,
            start_day=request.start_day
        )

        return ResponseModel(
            success=True,
            message=f"–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω ({len(request.clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤)",
            data=optimized_result
        )

    except HTTPException:
        raise
    except FileNotFoundError as e:
        raise HTTPException(
            status_code=500,
            detail=f"ML-–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ models/: {str(e)}"
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}"
        )


@router.get("/stats", response_model=ResponseModel)
async def get_route_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    return ResponseModel(
        success=True,
        message="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º",
        data={
            "total_routes_analyzed": 0,
            "average_distance": 0,
            "average_duration": 0
        }
    )
