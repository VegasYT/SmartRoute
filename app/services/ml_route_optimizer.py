"""–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

import os
import torch
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Set
from torch_geometric.data import Data

from app.ml.route_model import RouteNet
from app.services.osrm_service import OSRMService
from app.services.traffic_service import TrafficService
from app.schemas.route import RouteAnalysisResponse, RoutePoint


class MLRouteOptimizer:
    """ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""

    def __init__(
        self,
        model_path: str = None,
        traffic_config_path: str = None,
        osrm_base_url: str = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞.

        Args:
            model_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏
            traffic_config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —Ç—Ä–∞—Ñ–∏–∫–∞
            osrm_base_url: URL OSRM —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.model_path = model_path or os.getenv("MODEL_PATH", "models/routenet_traffic.pt")
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.osrm_service = OSRMService(base_url=osrm_base_url)
        self.traffic_service = TrafficService(traffic_config_path=traffic_config_path)

        # –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        self.model: Optional[RouteNet] = None
        self._model_loaded = False

    async def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å ML-–º–æ–¥–µ–ª—å"""
        if self._model_loaded:
            return

        try:
            # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å (in_dim=3: lat, lon, feature)
            self.model = RouteNet(in_dim=3).to(self.device)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
            self.model.load_state_dict(
                torch.load(self.model_path, map_location=self.device)
            )
            self.model.eval()

            self._model_loaded = True
            print(f"‚úÖ ML-–º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.model_path}")

        except FileNotFoundError:
            print(f"‚ö† –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.model_path}")
            raise
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def get_visit_duration(self, level: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö.

        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞ (VIP –∏–ª–∏ Standard)

        Returns:
            –í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        if level.lower() == "vip":
            return 25
        else:
            return 15

    def parse_time_safe(self, val: str, default: str) -> datetime.time:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏.

        Args:
            val: –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        Returns:
            –û–±—ä–µ–∫—Ç time
        """
        try:
            return datetime.strptime(str(val), "%H:%M").time()
        except Exception:
            return datetime.strptime(default, "%H:%M").time()

    def can_visit(self, at_time: datetime, client: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

        Args:
            at_time: –í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è
            client: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞

        Returns:
            True –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        work_start = self.parse_time_safe(
            client.get("work_start", "09:00"),
            "09:00"
        )
        work_end = self.parse_time_safe(
            client.get("work_end", "18:00"),
            "18:00"
        )
        lunch_start = self.parse_time_safe(
            client.get("lunch_start", "13:00"),
            "13:00"
        )
        lunch_end = self.parse_time_safe(
            client.get("lunch_end", "14:00"),
            "14:00"
        )

        t = at_time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –æ–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
        return work_start <= t < work_end and not (lunch_start <= t < lunch_end)

    async def optimize_route(
        self,
        clients: List[Dict],
        start_point: Optional[Dict] = None,
        start_time: Optional[str] = "09:00",
        start_day: Optional[str] = None
    ) -> RouteAnalysisResponse:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML-–º–æ–¥–µ–ª–∏.

        Args:
            clients: –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
            start_point: –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ dict —Å 'address', 'latitude', 'longitude'. –ï—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM)
            start_day: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (Monday, Tuesday, etc.)

        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if not self._model_loaded:
            await self.load_model()

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        if start_point:
            start_client = {
                "address": start_point["address"],
                "latitude": start_point["latitude"],
                "longitude": start_point["longitude"],
                "level": "start",
                "work_start": "00:00",
                "work_end": "23:59",
                "lunch_start": "23:59",
                "lunch_end": "23:59",
                "id": "START"
            }
            clients = [start_client] + clients

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        coords = [(c["latitude"], c["longitude"]) for c in clients]
        n = len(clients)

        # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —á–µ—Ä–µ–∑ OSRM
        print("‚è≥ –†–∞—Å—á—ë—Ç –º–∞—Ç—Ä–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —á–µ—Ä–µ–∑ OSRM...")
        base_time_matrix = await self.osrm_service.build_time_matrix(coords)
        distance_matrix = await self.osrm_service.build_distance_matrix(coords)
        print("‚úÖ –ú–∞—Ç—Ä–∏—Ü—ã –≥–æ—Ç–æ–≤—ã.")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        current_time = datetime.now().replace(
            hour=int(start_time.split(":")[0]),
            minute=int(start_time.split(":")[1]),
            second=0,
            microsecond=0
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if start_day:
            day_of_week = start_day.lower()
        else:
            day_of_week = current_time.strftime("%A").lower()

        print(f"\nüìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_of_week.capitalize()}, —Å—Ç–∞—Ä—Ç: {current_time.strftime('%H:%M')}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        route: List[int] = [0]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        visited: Set[int] = {0}
        total_time = 0.0
        total_distance = 0.0

        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ
        route_data = []  # [(client_idx, arrival_time, departure_time, travel_time, distance)]
        route_data.append((0, current_time, current_time, 0.0, 0.0))  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        while len(visited) < n:
            current_node = route[-1]

            best_j: Optional[int] = None
            best_score = -float("inf")
            best_arrival_time: Optional[datetime] = None
            best_departure_time: Optional[datetime] = None
            best_travel_time: Optional[float] = None

            any_available_later = False

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –Ω–µ–ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            for j in range(n):
                if j in visited or j == current_node:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
                base_time = base_time_matrix[current_node][j]

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
                traffic_mult = self.traffic_service.get_traffic_multiplier(
                    current_time.hour,
                    day_of_week
                )
                # –£–º–Ω–æ–∂–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–±–∫–∏ –Ω–∞ 0.65
                adjusted_time = base_time * (traffic_mult * 0.65)

                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
                tentative_arrival = current_time + timedelta(minutes=adjusted_time)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
                if not self.can_visit(tentative_arrival, clients[j]):
                    any_available_later = True
                    continue

                # –ü–æ–ª—É—á–∞–µ–º attention score –æ—Ç –º–æ–¥–µ–ª–∏
                attn_score = await self._get_attention_score(coords[j])

                # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π score
                score = attn_score / (adjusted_time + 1e-5)

                if score > best_score:
                    best_score = score
                    best_j = j
                    best_arrival_time = tentative_arrival
                    best_travel_time = adjusted_time

                    # –í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∫–ª–∏–µ–Ω—Ç–∞
                    service_duration = self.get_visit_duration(
                        clients[j].get("level", "standard")
                    )
                    best_departure_time = tentative_arrival + timedelta(minutes=service_duration)

            # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
            if best_j is None:
                if any_available_later:
                    # –ñ–¥—ë–º 15 –º–∏–Ω—É—Ç
                    print(f"‚è∏ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞–Ω—è—Ç—ã. –ñ–¥—ë–º 15 –º–∏–Ω—É—Ç... ({current_time.strftime('%H:%M')})")
                    current_time += timedelta(minutes=15)
                    continue
                else:
                    # –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                    break

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–∞—Ä—à—Ä—É—Ç
            route.append(best_j)
            visited.add(best_j)

            service_time = self.get_visit_duration(clients[best_j].get("level", "standard"))

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–æ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π
            distance = distance_matrix[current_node][best_j]

            total_time += best_travel_time + service_time
            total_distance += distance
            current_time = best_departure_time

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
            route_data.append((
                best_j,
                best_arrival_time,
                best_departure_time,
                best_travel_time,
                distance
            ))

            # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ–≥–∞
            current_id = clients[current_node].get("id", f"client_{current_node}")
            next_id = clients[best_j].get("id", f"client_{best_j}")

            print(
                f"‚û° ID {current_id} ‚Üí ID {next_id} | "
                f"–ü—É—Ç—å: {best_travel_time:.1f} –º–∏–Ω | "
                f"–ü—Ä–∏–±—ã—Ç–∏–µ: {best_arrival_time.strftime('%H:%M')} | "
                f"–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {service_time} –º–∏–Ω | "
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {best_departure_time.strftime('%H:%M')}"
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        route_points = []
        for idx, (client_idx, arrival_time, departure_time, travel_time, distance) in enumerate(route_data):
            client = clients[client_idx]
            route_points.append(RoutePoint(
                order=idx + 1,
                address=client["address"],
                latitude=client["latitude"],
                longitude=client["longitude"],
                estimated_arrival=arrival_time.strftime("%H:%M") if arrival_time else None,
                departure_time=departure_time.strftime("%H:%M") if departure_time else None,
                travel_time=round(travel_time, 2),
                service_time=self.get_visit_duration(client.get("level", "standard"))
            ))

        print("\n‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!")
        print(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} –º–∏–Ω—É—Ç")
        print(f"üìè –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance:.2f} –∫–º")

        return RouteAnalysisResponse(
            total_distance=round(total_distance, 2),
            total_duration=round(total_time, 2),
            optimized_route=route_points,
        )

    async def _get_attention_score(self, coords: tuple) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å attention score –æ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.

        Args:
            coords: –ö–æ—Ä—Ç–µ–∂ (latitude, longitude)

        Returns:
            Attention score
        """
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —É–∑–ª–∞
        node_feat = torch.tensor(
            [[coords[0], coords[1], 0.0]],
            dtype=torch.float32
        ).to(self.device)

        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ (–¥–ª—è –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞)
        edge_index = torch.tensor(
            [[0, 0], [0, 0]],
            dtype=torch.long
        ).to(self.device)

        edge_attr = torch.zeros((1, 1), dtype=torch.float32).to(self.device)

        # –°–æ–∑–¥–∞—ë–º Data –æ–±—ä–µ–∫—Ç
        data = Data(x=node_feat, edge_index=edge_index, edge_attr=edge_attr)

        # –ü–æ–ª—É—á–∞–µ–º attention score –æ—Ç –º–æ–¥–µ–ª–∏
        with torch.no_grad():
            attn_score = self.model(data).item()

        return attn_score
